name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.extract-version.outputs.is-prerelease }}
    steps:
      - name: Extract version info
        id: extract-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          # Remove 'v' prefix if present
          VERSION_NUMBER="${VERSION#v}"
          
          # Check if this is a pre-release (contains alpha, beta, rc, or has more than 3 version parts)
          if [[ "$VERSION_NUMBER" =~ (alpha|beta|rc) ]] || [[ $(echo "$VERSION_NUMBER" | tr '.' '\n' | wc -l) -gt 3 ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
          
          echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION_NUMBER (prerelease: $IS_PRERELEASE)"

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Run linting
        run: ruff check .
        
      - name: Run type checking
        run: mypy src
        
      - name: Run unit tests
        run: pytest tests/unit/ -v --tb=short
        
      - name: Test application startup
        run: |
          timeout 15s python -m hawkfish_controller --help || true
          echo "Application startup test passed"

  build-wheel:
    runs-on: ubuntu-latest
    needs: [validate-version, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build hatchling
          
      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          echo "Updated version to $VERSION"
          
      - name: Build wheel and source distribution
        run: python -m build
        
      - name: Verify build
        run: |
          pip install dist/*.whl
          python -c "import hawkfish_controller; print(f'Successfully imported HawkFish controller')"
          hawkfish-controller --help
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/*
          retention-days: 30

  build-docker:
    runs-on: ubuntu-latest
    needs: [validate-version, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        if: github.event_name != 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            hawkfish/hawkfish-controller
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'workflow_dispatch' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-version.outputs.version }}

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-version, test, build-wheel, build-docker]
    if: github.event_name != 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/
          
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="v${{ needs.validate-version.outputs.version }}"
          
          # Try to find existing release notes
          RELEASE_NOTES_FILE="docs/release-notes-${{ needs.validate-version.outputs.version }}.md"
          
          if [ -f "$RELEASE_NOTES_FILE" ]; then
            echo "Found existing release notes: $RELEASE_NOTES_FILE"
            # Extract content after the first header
            CHANGELOG_CONTENT=$(sed -n '/^##/,$p' "$RELEASE_NOTES_FILE" | tail -n +2)
          else
            echo "No existing release notes found, generating from commits"
            # Generate changelog from commits since last tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            
            if [ -n "$PREVIOUS_TAG" ]; then
              CHANGELOG_CONTENT=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD)
            else
              CHANGELOG_CONTENT="- Initial release"
            fi
          fi
          
          # Save changelog to file
          cat > release_notes.md << EOF
          ## What's Changed
          
          $CHANGELOG_CONTENT
          
          ## Installation
          
          ### Python Package
          \`\`\`bash
          pip install hawkfish==${{ needs.validate-version.outputs.version }}
          \`\`\`
          
          ### Docker
          \`\`\`bash
          docker pull hawkfish/hawkfish-controller:${{ needs.validate-version.outputs.version }}
          \`\`\`
          
          ### From Source
          \`\`\`bash
          git clone https://github.com/your-org/HawkFish.git
          cd HawkFish
          git checkout $VERSION
          pip install -e .
          \`\`\`
          
          ## Documentation
          
          - [Quickstart Guide](docs/quickstart.md)
          - [Architecture Overview](docs/architecture.md)
          - [Deployment Guide](docs/deploy.md)
          - [API Documentation](docs/)
          
          **Full Changelog**: https://github.com/your-org/HawkFish/compare/$PREVIOUS_TAG...$VERSION
          EOF
          
          echo "Generated release notes:"
          cat release_notes.md
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          release_name: HawkFish v${{ needs.validate-version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.validate-version.outputs.is-prerelease }}
          
      - name: Upload Python wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/hawkfish-${{ needs.validate-version.outputs.version }}-py3-none-any.whl
          asset_name: hawkfish-${{ needs.validate-version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip
          
      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/hawkfish-${{ needs.validate-version.outputs.version }}.tar.gz
          asset_name: hawkfish-${{ needs.validate-version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-version, create-release]
    if: github.event_name != 'workflow_dispatch' && !needs.validate-version.outputs.is-prerelease
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true

  update-helm-chart:
    runs-on: ubuntu-latest
    needs: [validate-version, build-docker]
    if: github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Update Helm chart version
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          sed -i "s/^version: .*/version: $VERSION/" deploy/helm/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: $VERSION/" deploy/helm/Chart.yaml
          sed -i "s/tag: .*/tag: \"$VERSION\"/" deploy/helm/values.yaml
          
      - name: Commit and push Helm chart updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add deploy/helm/Chart.yaml deploy/helm/values.yaml
          git commit -m "Update Helm chart to version ${{ needs.validate-version.outputs.version }}" || exit 0
          git push

  notify-release:
    runs-on: ubuntu-latest
    needs: [validate-version, create-release]
    if: always() && github.event_name != 'workflow_dispatch'
    steps:
      - name: Send notification
        run: |
          VERSION="v${{ needs.validate-version.outputs.version }}"
          SUCCESS="${{ needs.create-release.result == 'success' }}"
          
          if [ "$SUCCESS" = "true" ]; then
            echo "Release $VERSION completed successfully!"
            echo "Docker images: hawkfish/hawkfish-controller:${{ needs.validate-version.outputs.version }}"
            echo "Python package: hawkfish==${{ needs.validate-version.outputs.version }}"
          else
            echo "Release $VERSION failed. Check the workflow logs for details."
          fi
